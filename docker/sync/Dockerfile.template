# Standardized Dockerfile template for DangerPrep sync services
# This template follows Turbo's Docker best practices for monorepo optimization
# 
# Usage: Copy this template to each service directory and customize the variables:
# - SERVICE_NAME: The name of the service (e.g., "kiwix-sync", "nfs-sync", "offline-sync")
# - SYSTEM_DEPS: Service-specific system dependencies
# - USER_GROUPS: Additional user groups for service-specific permissions
# - ENTRY_POINT: The main JavaScript file to run

FROM node:18-alpine AS base

# Install turbo globally
RUN npm install -g turbo@^2

FROM base AS builder
RUN apk update
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Copy the entire monorepo
COPY . .

# Generate a partial monorepo with a pruned lockfile for the target service
# Replace SERVICE_NAME with the actual service name (e.g., "kiwix-sync")
RUN turbo prune SERVICE_NAME --docker

FROM base AS installer
RUN apk update
RUN apk add --no-cache libc6-compat

# Install service-specific system dependencies
# Replace SYSTEM_DEPS with actual dependencies needed by the service
RUN apk add --no-cache SYSTEM_DEPS

WORKDIR /app

# First install dependencies (as they change less often)
COPY --from=builder /app/out/json/ .
RUN npm ci --frozen-lockfile

# Build the project and dependencies
COPY --from=builder /app/out/full/ .
RUN turbo run build --filter=SERVICE_NAME

FROM base AS runner
WORKDIR /app

# Install runtime system dependencies only
RUN apk add --no-cache SYSTEM_DEPS

# Create non-root user with consistent UID/GID
RUN addgroup -g 1001 -S appuser && \
    adduser -S appuser -u 1001 -G appuser

# Add user to additional groups if needed (replace USER_GROUPS)
# RUN addgroup appuser USER_GROUPS

# Copy the built application
COPY --from=installer --chown=appuser:appuser /app/docker/sync/SERVICE_NAME/dist ./dist
COPY --from=installer --chown=appuser:appuser /app/docker/sync/SERVICE_NAME/package.json ./package.json

# Create data directory
RUN mkdir -p /app/data/logs && \
    chown -R appuser:appuser /app/data

# Switch to non-root user
USER appuser

# Health check using the standardized CLI
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD node dist/ENTRY_POINT health --simple || exit 1

# Expose port if needed (uncomment and customize)
# EXPOSE 8080

# Run the service using the standardized entry point
CMD ["node", "dist/ENTRY_POINT"]
