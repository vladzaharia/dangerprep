services:
  mongo:
    image: mongo:6.0
    restart: unless-stopped
    volumes:
      - komodo-mongo-db:/data/db
    env_file:
      - compose.env
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${KOMODO_DB_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${KOMODO_DB_PASSWORD}
    labels:
      # Prevent Komodo from stopping with StopAllContainers
      - "komodo.skip="
      
      # Watchtower
      - "com.centurylinklabs.watchtower.enable=true"
    networks:
      - komodo
    healthcheck:
      test: ["CMD", "mongosh", "--quiet", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 256M

  core:
    image: ghcr.io/moghtech/komodo-core:latest
    restart: unless-stopped
    depends_on:
      - mongo
    volumes:
      - komodo-backups:/backups
      - komodo-syncs:/syncs
    env_file:
      - compose.env
    environment:
      - KOMODO_DATABASE_ADDRESS=mongo:27017
      - KOMODO_DATABASE_USERNAME=${KOMODO_DB_USERNAME}
      - KOMODO_DATABASE_PASSWORD=${KOMODO_DB_PASSWORD}
    labels:
      # Prevent Komodo from stopping with StopAllContainers
      - "komodo.skip="
      
      - "traefik.enable=true"

      # # Komodo - Internal (.danger domain with step-ca)
      # - "traefik.http.routers.komodo-internal.rule=Host(`docker.danger`)"
      # - "traefik.http.routers.komodo-internal.entrypoints=websecure"
      # - "traefik.http.routers.komodo-internal.tls.certresolver=step-ca"
      # - "traefik.http.routers.komodo-internal.service=komodo"

      # Komodo - External (.danger.diy domain with Let's Encrypt)
      - "traefik.http.routers.komodo-external.rule=Host(`docker.danger.diy`)"
      - "traefik.http.routers.komodo-external.entrypoints=websecure"
      - "traefik.http.routers.komodo-external.tls.certresolver=letsencrypt-cloudflare"
      - "traefik.http.routers.komodo-external.service=komodo"

      # Komodo - External (.danger.diy domain with Let's Encrypt)
      - "traefik.http.routers.komodo-argos.rule=Host(`docker.argos.surf`)"
      - "traefik.http.routers.komodo-argos.entrypoints=websecure"
      - "traefik.http.routers.komodo-argos.tls.certresolver=letsencrypt-cloudflare"
      - "traefik.http.routers.komodo-argos.service=komodo"

      # Service definition (shared by both routers)
      - "traefik.http.services.komodo.loadbalancer.server.port=9120"

      # DNS registration
      - "dns.register=docker"

      # Service discovery
      - "service.type=maintenance"
      - "service.name=Komodo"
      - "service.description=Docker container management"
      - "service.icon=box"

      # Watchtower
      - "com.centurylinklabs.watchtower.enable=true"
    networks:
      - traefik
      - komodo
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 512M

  periphery:
    image: ghcr.io/moghtech/komodo-periphery:latest
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /proc:/proc
      - komodo-periphery:/etc/komodo
    env_file:
      - compose.env
    environment:
      - PERIPHERY_ROOT_DIRECTORY=/etc/komodo
    labels:
      # Prevent Komodo from stopping with StopAllContainers
      - "komodo.skip="
      
      # Watchtower
      - "com.centurylinklabs.watchtower.enable=true"
    networks:
      - komodo
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8120/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 256M

volumes:
  komodo-mongo-db:
    driver: local
  komodo-mongo-config:
    driver: local
  komodo-backups:
    driver: local
  komodo-syncs:
    driver: local
  komodo-periphery:
    driver: local

networks:
  traefik:
    external: true
    name: traefik
  komodo:
    driver: bridge
