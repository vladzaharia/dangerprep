services:
  docmost:
    image: docmost/docmost:latest
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
    volumes:
      - docmost-storage:/app/data/storage
      # Mount secrets as files for enhanced security
      - ${INSTALL_ROOT}/secrets/docmost/app_secret:/run/secrets/app_secret:ro
      - ${INSTALL_ROOT}/secrets/docmost/db_password:/run/secrets/db_password:ro
    env_file:
      - compose.env
    environment:
      - APP_URL=https://docs.danger
      - REDIS_URL=redis://redis:6379
      # Secrets will be populated by setup script from mounted files
      - APP_SECRET=${APP_SECRET}
      - DATABASE_URL=${DATABASE_URL}
    labels:
      - "traefik.enable=true"

      # # Docmost - Internal (.danger domain with step-ca)
      # - "traefik.http.routers.docmost-internal.rule=Host(`docs.danger`)"
      # - "traefik.http.routers.docmost-internal.entrypoints=websecure"
      # - "traefik.http.routers.docmost-internal.tls.certresolver=step-ca"
      # - "traefik.http.routers.docmost-internal.service=docmost"

      # Docmost - External (.danger.diy domain with Let's Encrypt)
      - "traefik.http.routers.docmost-external.rule=Host(`docs.danger.diy`)"
      - "traefik.http.routers.docmost-external.entrypoints=websecure"
      - "traefik.http.routers.docmost-external.tls.certresolver=letsencrypt-cloudflare"
      - "traefik.http.routers.docmost-external.service=docmost"

      # Service definition (shared by both routers)
      - "traefik.http.services.docmost.loadbalancer.server.port=3000"

      # DNS registration
      - "dns.register=docs"

      # Service discovery
      - "service.type=private"
      - "service.name=Documentation"
      - "service.description=Team documentation and knowledge base"
      - "service.icon=file-text"

      # Watchtower
      - "com.centurylinklabs.watchtower.enable=true"
    networks:
      - traefik
      - docmost
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  postgres:
    image: postgres:16-alpine
    restart: unless-stopped
    volumes:
      - docmost-postgres:/var/lib/postgresql/data
    env_file:
      - compose.env
    environment:
      - POSTGRES_DB=docmost
      - POSTGRES_USER=docmost
      - POSTGRES_PASSWORD=zs15ZfGFOp_E_RQI5LOjvjl6rpEBCwoo
    labels:
      - "traefik.enable=false"
      - "com.centurylinklabs.watchtower.enable=true"
    networks:
      - docmost
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U docmost -d docmost"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  redis:
    image: redis:7.2-alpine
    restart: unless-stopped
    volumes:
      - docmost-redis:/data
    env_file:
      - compose.env
    labels:
      - "traefik.enable=false"
      - "com.centurylinklabs.watchtower.enable=true"
    networks:
      - docmost
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

volumes:
  docmost-storage:
    driver: local
  docmost-postgres:
    driver: local
  docmost-redis:
    driver: local

networks:
  traefik:
    external: true
    name: traefik
  docmost:
    driver: bridge
