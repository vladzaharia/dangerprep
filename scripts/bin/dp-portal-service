#!/bin/bash
# DangerPrep Portal System Service Manager
# Installs and manages the DangerPrep Portal as a system service instead of Docker
# 
# Usage:
#   dp-portal-service [OPTIONS] [COMMAND]
#
# Commands:
#   install      Install portal as system service
#   uninstall    Remove portal system service
#   start        Start the portal service
#   stop         Stop the portal service
#   restart      Restart the portal service
#   status       Show portal service status
#   build        Build the portal application
#
# Options:
#   -h, --help       Show this help message
#   -v, --verbose    Enable verbose output
#   --force          Force installation even if already installed

set -euo pipefail

# Script configuration
readonly PORTAL_SCRIPT_NAME="dp-portal-service"
readonly SERVICE_NAME="dangerprep-portal"

# Paths
readonly INSTALL_ROOT="${DANGERPREP_INSTALL_ROOT:-/opt/dangerprep}"
readonly PORTAL_DIR="$INSTALL_ROOT/docker/infrastructure/portal"
readonly SERVICE_FILE="/etc/systemd/system/${SERVICE_NAME}.service"
readonly ENV_FILE="$PORTAL_DIR/compose.env"

# Node.js and Yarn requirements
readonly REQUIRED_NODE_VERSION="22"
readonly REQUIRED_YARN_VERSION="4"

# Source shared utilities (avoiding conflicts)
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly SHARED_DIR="$(dirname "$SCRIPT_DIR")/shared"

# Source only specific utility functions we need
if [[ -f "$SHARED_DIR/gum-utils.sh" ]]; then
    # shellcheck source=/dev/null
    source "$SHARED_DIR/gum-utils.sh" 2>/dev/null || true
fi

# Define our own logging functions to avoid conflicts
log_info() {
    echo "[INFO] $*"
}

log_success() {
    echo "[SUCCESS] $*"
}

log_error() {
    echo "[ERROR] $*" >&2
}

log_warn() {
    echo "[WARN] $*" >&2
}

# Function to show help
show_help() {
    cat << EOF
DangerPrep Portal System Service Manager

USAGE:
    $PORTAL_SCRIPT_NAME [OPTIONS] [COMMAND]

COMMANDS:
    install      Install portal as system service
    uninstall    Remove portal system service  
    start        Start the portal service
    stop         Stop the portal service
    restart      Restart the portal service
    status       Show portal service status
    build        Build the portal application

OPTIONS:
    -h, --help       Show this help message
    -v, --verbose    Enable verbose output
    --force          Force installation even if already installed

EXAMPLES:
    $PORTAL_SCRIPT_NAME install
    $PORTAL_SCRIPT_NAME status
    $PORTAL_SCRIPT_NAME restart

EOF
}

# Check if Node.js meets version requirement
check_node_version() {
    if ! command -v node >/dev/null 2>&1; then
        return 1
    fi
    
    local node_version
    node_version=$(node --version | sed 's/v//' | cut -d. -f1)
    
    if [[ "$node_version" -ge "$REQUIRED_NODE_VERSION" ]]; then
        return 0
    else
        return 1
    fi
}

# Check if Yarn meets version requirement
check_yarn_version() {
    if ! command -v yarn >/dev/null 2>&1; then
        return 1
    fi
    
    local yarn_version
    yarn_version=$(yarn --version | cut -d. -f1)
    
    if [[ "$yarn_version" -ge "$REQUIRED_YARN_VERSION" ]]; then
        return 0
    else
        return 1
    fi
}

# Install Node.js 22
install_nodejs() {
    log_info "Installing Node.js $REQUIRED_NODE_VERSION..."
    
    # Install NodeSource repository
    curl -fsSL https://deb.nodesource.com/setup_22.x | bash -
    apt-get install -y nodejs
    
    # Enable corepack for Yarn
    corepack enable
    
    log_success "Node.js installed successfully"
}

# Install Yarn 4
install_yarn() {
    log_info "Installing Yarn $REQUIRED_YARN_VERSION..."
    
    # Use corepack to install Yarn 4
    corepack prepare yarn@stable --activate
    
    log_success "Yarn installed successfully"
}

# Build the portal application
build_portal() {
    log_info "Building portal application..."
    
    if [[ ! -d "$PORTAL_DIR" ]]; then
        log_error "Portal directory not found: $PORTAL_DIR"
        return 1
    fi
    
    cd "$PORTAL_DIR"
    
    # Install dependencies
    log_info "Installing dependencies..."
    yarn install --immutable
    
    # Build the application
    log_info "Building application..."
    yarn build
    
    log_success "Portal application built successfully"
}

# Create systemd service file
create_service_file() {
    log_info "Creating systemd service file..."
    
    local service_content
    read -r -d '' service_content << 'EOF' || true
[Unit]
Description=DangerPrep Portal Service
Documentation=https://github.com/vladzaharia/dangerprep
After=network.target docker.service
Wants=network.target
Requires=docker.service

[Service]
Type=simple
User=root
Group=root
WorkingDirectory={{PORTAL_DIR}}
Environment=NODE_ENV=production
EnvironmentFile={{ENV_FILE}}
ExecStart=/usr/bin/yarn start
ExecReload=/bin/kill -HUP $MAINPID
Restart=always
RestartSec=10
TimeoutStartSec=60
TimeoutStopSec=30

# Security settings (relaxed for system access)
NoNewPrivileges=false
ProtectSystem=false
ProtectHome=false
ProtectKernelTunables=false
ProtectKernelModules=false
ProtectControlGroups=false

# Resource limits
LimitNOFILE=65536
LimitNPROC=4096

# Logging
StandardOutput=journal
StandardError=journal
SyslogIdentifier=dangerprep-portal

[Install]
WantedBy=multi-user.target
EOF

    # Replace template variables
    service_content="${service_content//\{\{PORTAL_DIR\}\}/$PORTAL_DIR}"
    service_content="${service_content//\{\{ENV_FILE\}\}/$ENV_FILE}"
    
    # Write service file
    echo "$service_content" > "$SERVICE_FILE"
    chmod 644 "$SERVICE_FILE"
    
    # Reload systemd
    systemctl daemon-reload
    
    log_success "Service file created: $SERVICE_FILE"
}

# Install portal service
install_portal_service() {
    local force_install="${1:-false}"
    
    log_info "Installing DangerPrep Portal as system service..."
    
    # Check if already installed
    if [[ -f "$SERVICE_FILE" ]] && [[ "$force_install" != "true" ]]; then
        log_error "Portal service already installed. Use --force to reinstall."
        return 1
    fi
    
    # Check and install Node.js
    if ! check_node_version; then
        log_info "Node.js $REQUIRED_NODE_VERSION not found, installing..."
        install_nodejs
    else
        log_success "Node.js requirement satisfied"
    fi
    
    # Check and install Yarn
    if ! check_yarn_version; then
        log_info "Yarn $REQUIRED_YARN_VERSION not found, installing..."
        install_yarn
    else
        log_success "Yarn requirement satisfied"
    fi
    
    # Build portal
    build_portal
    
    # Create service file
    create_service_file
    
    # Enable and start service
    systemctl enable "$SERVICE_NAME"
    systemctl start "$SERVICE_NAME"
    
    log_success "Portal service installed and started successfully"
    log_info "Service status: $(systemctl is-active "$SERVICE_NAME")"
    log_info "Portal should be available at http://localhost:3000"
}

# Uninstall portal service
uninstall_portal_service() {
    log_info "Uninstalling DangerPrep Portal service..."
    
    # Stop and disable service
    if systemctl is-active --quiet "$SERVICE_NAME"; then
        systemctl stop "$SERVICE_NAME"
    fi
    
    if systemctl is-enabled --quiet "$SERVICE_NAME"; then
        systemctl disable "$SERVICE_NAME"
    fi
    
    # Remove service file
    if [[ -f "$SERVICE_FILE" ]]; then
        rm -f "$SERVICE_FILE"
        systemctl daemon-reload
    fi
    
    log_success "Portal service uninstalled successfully"
    log_info "Portal application files remain in: $PORTAL_DIR"
}

# Show service status
show_status() {
    log_info "DangerPrep Portal Service Status:"
    echo
    
    if [[ -f "$SERVICE_FILE" ]]; then
        echo "Service file: $SERVICE_FILE âœ“"
        echo "Service status: $(systemctl is-active "$SERVICE_NAME" 2>/dev/null || echo "inactive")"
        echo "Service enabled: $(systemctl is-enabled "$SERVICE_NAME" 2>/dev/null || echo "disabled")"
        echo
        
        if systemctl is-active --quiet "$SERVICE_NAME"; then
            echo "Recent logs:"
            journalctl -u "$SERVICE_NAME" --no-pager -n 10
        fi
    else
        echo "Service not installed"
    fi
}

# Main function
main() {
    local verbose=false
    local force=false
    local command=""
    
    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                show_help
                exit 0
                ;;
            -v|--verbose)
                verbose=true
                shift
                ;;
            --force)
                force=true
                shift
                ;;
            install|uninstall|start|stop|restart|status|build)
                command="$1"
                shift
                ;;
            *)
                log_error "Unknown option: $1"
                show_help
                exit 1
                ;;
        esac
    done
    
    # Set verbose logging
    if [[ "$verbose" == "true" ]]; then
        set -x
    fi
    
    # Require root privileges
    if [[ $EUID -ne 0 ]]; then
        log_error "This script must be run as root"
        exit 1
    fi
    
    # Execute command
    case "$command" in
        install)
            install_portal_service "$force"
            ;;
        uninstall)
            uninstall_portal_service
            ;;
        start)
            systemctl start "$SERVICE_NAME"
            log_success "Portal service started"
            ;;
        stop)
            systemctl stop "$SERVICE_NAME"
            log_success "Portal service stopped"
            ;;
        restart)
            systemctl restart "$SERVICE_NAME"
            log_success "Portal service restarted"
            ;;
        status)
            show_status
            ;;
        build)
            build_portal
            ;;
        "")
            log_error "No command specified"
            show_help
            exit 1
            ;;
        *)
            log_error "Unknown command: $command"
            show_help
            exit 1
            ;;
    esac
}

# Run main function
main "$@"
